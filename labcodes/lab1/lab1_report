*************************************
lab1		by jiaojiao     2012011357 *
*************************************
练习一
1 操作系统镜像文件ucore.img是如何一步一步生成的？(需要比较详细地解释Makefile中每一条相关命令和命令参数的含义，以及说明命令导致的结果)
*************************************
在CLI使用命令 make "V=" 可以了解在make过程中到底执行了哪些指令。
在makefile文件中，可以看到生成ucore.img文件的具体内容为：
----
# create ucore.img
UCOREIMG	:= $(call totarget,ucore.img)
$(UCOREIMG): $(kernel) $(bootblock)
	$(V)dd if=/dev/zero of=$@ count=10000
	$(V)dd if=$(bootblock) of=$@ conv=notrunc
	$(V)dd if=$(kernel) of=$@ seek=1 conv=notrunc
$(call create_target,ucore.img)
----
说明生成ucore.img需要文件kernel和bootblock。构建关系也可以从命令行中看出：
----
dd if=bin/bootblock of=bin/ucore.img conv=notrunc
1+0 records in
1+0 records out
512 bytes (512 B) copied, 0.000198544 s, 2.6 MB/s
dd if=bin/kernel of=bin/ucore.img seek=1 conv=notrunc
146+1 records in
146+1 records out
----
下面是make时通过CLI输出的执行命令，ld命令链接了多个文件生成目标文件kernel和bootblock。
----
+ ld bin/kernel
ld -m    elf_i386 -nostdlib -T tools/kernel.ld -o bin/kernel  obj/kern/init/init.o obj/kern/libs/readline.o obj/kern/libs/stdio.o obj/kern/debug/kdebug.o obj/kern/debug/kmonitor.o obj/kern/debug/panic.o obj/kern/driver/clock.o obj/kern/driver/console.o obj/kern/driver/intr.o obj/kern/driver/picirq.o obj/kern/trap/trap.o obj/kern/trap/trapentry.o obj/kern/trap/vectors.o obj/kern/mm/pmm.o  obj/libs/printfmt.o obj/libs/string.o
+ ld bin/bootblock
ld -m    elf_i386 -nostdlib -N -e start -Ttext 0x7C00 obj/boot/bootasm.o obj/boot/bootmain.o -o obj/bootblock.o
----
因此同时使用这两种方法可以看出文件之间的生成关系：
ucore.img---kernel---init
			      ---readline
			      ---stdio
			      ---kdebug
			      ---panic
			      ---clock
			      ---intr
			      ---picirq
			      ---trapentry
			      ---pmm
			      ---string
		---bootblock---bootasm
				   ---bootmain
				   ---sign 
典型编译参数设置：
-ggdb  生成可供gdb使用的调试信息
-m32  生成适用于32位环境的代码
-gstabs  生成stabs格式的调试信息
-nostdinc  不使用标准库
-fno-stack-protector  不生成用于检测缓冲区溢出的代码
-Os  为减小代码大小而进行优化
-I<dir>  添加搜索头文件的路径：


*************************************
2 一个被系统认为是符合规范的硬盘主引导扇区的特征是什么？
*************************************
根据课堂所讲以及lab1中文件sign.c的内容，符合规范的MBR一共有512字节，且最后两字节的内容必须为0x55和0xAA，否则就会出错。
*************************************

练习二
1 从CPU加电后执行的第一条指令开始，单步跟踪BIOS的执行。
*************************************
执行命令make debug，可以查找在makefile里相应代码：
debug: $(UCOREIMG)
	$(V)$(QEMU) -S -s -d in_asm -D $(BINDIR)/q.log -parallel stdio -hda $< -serial null &
	$(V)sleep 2
	$(V)$(TERMINAL)  -e "cgdb -q -x tools/gdbinit"
通过gdb调试单步进行，并将执行内容写入log文件。
查找gdbinit文件内容：
file obj/bootblock.o
target remote :1234
break bootmain
之后就可以单步执行并将会变指令记录在文件中：
----------------
IN: 
0xfffffff0:  ljmp   $0xf000,$0xe05b

----------------
IN: 
0x000fe05b:  cmpl   $0x0,%cs:0x65a4

----------------
IN: 
0x000fe062:  jne    0xfd2b9

----------------
IN: 
0x000fe066:  xor    %ax,%ax

----------------
IN: 
0x000fe068:  mov    %ax,%ss

----------------
IN: 
0x000fe06a:  mov    $0x7000,%esp

----------------
*************************************
2 在初始化位置0x7c00设置实地址断点,测试断点正常。
************************************
执行make debug，修改gdbinit文件中的代码，显示指令行数改为10行：
file obj/bootblock.o
target remote :1234
set architecture i8086
b *0x7c00
continue
x /10i $pc
显示结果：
----
The target architecture is assumed to be i8086
Breakpoint 1 at 0x7c00: file boot/bootasm.S, line 16.

Breakpoint 1, start () at boot/bootasm.S:16
=> 0x7c00 <start>:      cli
   0x7c01 <start+1>:    cld    
   0x7c02 <start+2>:    xor    %ax,%ax
   0x7c04 <start+4>:    mov    %ax,%ds
   0x7c06 <start+6>:    mov    %ax,%es
   0x7c08 <start+8>:    mov    %ax,%ss
   0x7c0a <seta20.1>:   in     $0x64,%al
   0x7c0c <seta20.1+2>: test   $0x2,%al
   0x7c0e <seta20.1+4>: jne    0x7c0a <seta20.1>
   0x7c10 <seta20.1+6>: mov    $0xd1,%al
(gdb) 
----
************************************
3 从0x7c00开始跟踪代码运行,将单步跟踪反汇编得到的代码与bootasm.S和 bootblock.asm进行比较。
************************************
通过设置断点，并进行单步追踪将执行后的汇编代码保存在文件中进行比较，发现内容与源文件中基本一致，不同之处在于某些指令存在长字的不一致。
执行代码反汇编：
----
IN: 
0x00007c00:  cli    

----------------
IN: 
0x00007c01:  cld    

----------------
IN: 
0x00007c02:  xor    %ax,%ax

----------------
IN: 
0x00007c04:  mov    %ax,%ds

----------------
IN: 
0x00007c06:  mov    %ax,%es

----------------
IN: 
0x00007c08:  mov    %ax,%ss
----
源代码bootasm.s：
----
start:
.code16                                             # Assemble for 16-bit mode
    cli                                             # Disable interrupts
    cld                                             # String operations increment

    # Set up the important data segment registers (DS, ES, SS).
    xorw %ax, %ax                                   # Segment number zero
    movw %ax, %ds                                   # -> Data Segment
    movw %ax, %es                                   # -> Extra Segment
    movw %ax, %ss                                   # -> Stack Segment
----
可以看出指令xorw经过反汇编变为了xor，movw变为mov，因此存在某些不同之处。
***********************************
4 自己找一个bootloader或内核中的代码位置，设置断点并进行测试。
***********************************
选择在kern中设置断点进行测试。
在tools/moninit文件中：
----
file bin/kernel
target remote :1234
break kern_init
c
x /10i $pc
----
在CLI中执行make debug-mon：
----
Breakpoint 1 at 0x100000: file kern/init/init.c, line 17.

Breakpoint 1, kern_init () at kern/init/init.c:17
17	kern_init(void){
=> 0x100000 <kern_init>:	push   %ebp
   0x100001 <kern_init+1>:	mov    %esp,%ebp
   0x100003 <kern_init+3>:	sub    $0x28,%esp
   0x100006 <kern_init+6>:	mov    $0x10fd80,%edx
   0x10000b <kern_init+11>:	mov    $0x10ea16,%eax
   0x100010 <kern_init+16>:	sub    %eax,%edx
   0x100012 <kern_init+18>:	mov    %edx,%eax
   0x100014 <kern_init+20>:	mov    %eax,0x8(%esp)
   0x100018 <kern_init+24>:	movl   $0x0,0x4(%esp)
   0x100020 <kern_init+32>:	movl   $0x10ea16,(%esp)
(gdb) 
----
***********************************
练习三
BIOS将通过读取硬盘主引导扇区到内存，并转跳到对应内存中的位置执行bootloader。请分析bootloader是如何完成从实模式进入保护模式的。
***********************************
文件bootasm.S中完成了这部分的功能。
-----
#开始部分处于实模式下。
.globl start
start:
.code16       #将重要的段寄存器ds es ss置0                              
    cli                                             
    cld                                             
    xorw %ax, %ax                                   
    movw %ax, %ds                                  
    movw %ax, %es                                
    movw %ax, %ss         
                          
#打开A20，使用32位寻址空间，即内存为4GB
seta20.1:
    inb $0x64, %al                                  
    testb $0x2, %al
    jnz seta20.1
    movb $0xd1, %al                                 
    outb %al, $0x64                                 
seta20.2:
    inb $0x64, %al                                  
    testb $0x2, %al
    jnz seta20.2
    movb $0xdf, %al                                 
    outb %al, $0x60    	#A20置高                            

#从实模式下转换为保护模式
    lgdt gdtdesc	#初始化载入GDT表
    movl %cr0, %eax	#将cr0寄存器PE位置进入保护模式
    orl $CR0_PE_ON, %eax
    movl %eax, %cr0
    ljmp $PROT_MODE_CSEG, $protcseg		#长跳转更新cs地址

.code32                                            
protcseg:
    # Set up the protected-mode data segment registers
    movw $PROT_MODE_DSEG, %ax                       #设置段寄存器
    movw %ax, %ds                                 
    movw %ax, %es                                   
    movw %ax, %fs                                  
    movw %ax, %gs                                   
    movw %ax, %ss                                   #设置堆栈
    movl $0x0, %ebp
    movl $start, %esp
    call bootmain	#成功转换到保护模式 进入bootmain
----
***********************************
练习四
通过阅读bootmain.c，了解bootloader如何加载ELF文件。通过分析源代码和通过qemu来运行并调试bootloader&OS，
1 bootloader如何读取硬盘扇区的？
**********************************
在函数bootmain中通过语句：
readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0);
读取硬盘中的第一页。
static void readseg(uintptr_t va, uint32_t count, uint32_t offset) {		#函数readseg的具体实现 可以读取任意长度
    uintptr_t end_va = va + count;
    va -= offset % SECTSIZE;
    uint32_t secno = (offset / SECTSIZE) + 1;
    for (; va < end_va; va += SECTSIZE, secno ++) {
        readsect((void *)va, secno);	#调用了函数readsect
    }
}
static void readsect(void *dst, uint32_t secno) {		#函数readsect的具体实现 读取一个sector
    waitdisk();
    outb(0x1F2, 1);                        
    outb(0x1F3, secno & 0xFF);
    outb(0x1F4, (secno >> 8) & 0xFF);
    outb(0x1F5, (secno >> 16) & 0xFF);
    outb(0x1F6, ((secno >> 24) & 0xF) | 0xE0);
    outb(0x1F7, 0x20);                      
    waitdisk();
    insl(0x1F0, dst, SECTSIZE / 4);
}
**********************************
2 bootloader是如何加载ELF格式的OS？
**********************************
	//在函数bootmain中，首先判断格式是否正确
    if (ELFHDR->e_magic != ELF_MAGIC) {
        goto bad;
    }
    struct proghdr *ph, *eph;
	//若格式没有错误，则载入程序段和数据
    ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);
    eph = ph + ELFHDR->e_phnum;
    for (; ph < eph; ph ++) {
        readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset);
    }
	//转入ucore的入口
    ((void (*)(void))(ELFHDR->e_entry & 0xFFFFFF))();
**********************************
练习五
请完成实验，看看输出是否与上述显示大致一致，并解释最后一行各个数值的含义
**********************************
添加代码执行后输出结果如下：
ebp:0x00007b08 eip:0x001009a6 args:0x00010094 0x00000000 0x00007b38 0x00100092 
    kern/debug/kdebug.c:305: print_stackframe+21
ebp:0x00007b18 eip:0x00100ca3 args:0x00000000 0x00000000 0x00000000 0x00007b88 
    kern/debug/kmonitor.c:125: mon_backtrace+10
ebp:0x00007b38 eip:0x00100092 args:0x00000000 0x00007b60 0xffff0000 0x00007b64 
    kern/init/init.c:48: grade_backtrace2+33
ebp:0x00007b58 eip:0x001000bb args:0x00000000 0xffff0000 0x00007b84 0x00000029 
    kern/init/init.c:53: grade_backtrace1+38
ebp:0x00007b78 eip:0x001000d9 args:0x00000000 0x00100000 0xffff0000 0x0000001d 
    kern/init/init.c:58: grade_backtrace0+23
ebp:0x00007b98 eip:0x001000fe args:0x001032fc 0x001032e0 0x0000130a 0x00000000 
    kern/init/init.c:63: grade_backtrace+34
ebp:0x00007bc8 eip:0x00100055 args:0x00000000 0x00000000 0x00000000 0x00010094 
    kern/init/init.c:28: kern_init+84
ebp:0x00007bf8 eip:0x00007d68 args:0xc031fcfa 0xc08ed88e 0x64e4d08e 0xfa7502a8 
    <unknow>: -- 0x00007d67 --
输出信息依次为栈中每层的ebp和eip的值，其中ebp指向当前函数调用栈中栈底的位置，eip为下一条指令的地址。
接下来输出函数的（四个）参数。
下面是通过执行函数print_debuginfo()显示调用语句的文件位置，调用的函数名称和该函数中的行数。
由于最深一层是载入bootloader的位置，因此深入到该层时调用位置显示为unknown，此时的eip地址为0x7d67。
**********************************
练习六
请完成编码工作和回答如下问题：
1 中断向量表中一个表项占多少字节？其中哪几位代表中断处理代码的入口？
*********************************
中断向量表一个表项占用8字节。
其中2-3字节是段选择子，0-1字节和6-7字节拼成位移，
两者联合便是中断处理程序的入口地址。
*********************************
2  请编程完善kern/trap/trap.c中对中断向量表进行初始化的函数idt_init。在idt_init函数中，依次对所有中断入口进行初始化。使用mmu.h中的SETGATE宏，填充idt数组内容。注意除了系统调用中断(T_SYSCALL)以外，其它中断均使用中断门描述符，权限为内核态权限；而系统调用中断使用异常，权限为陷阱门描述符。每个中断的入口由tools/vectors.c生成，使用trap.c中声明的vectors数组即可。
*********************************
*********************************
3 请编程完善trap.c中的中断处理函数trap，在对时钟中断进行处理的部分填写trap函数中处理时钟中断的部分，使操作系统每遇到100次时钟中断后，调用print_ticks子程序，向屏幕上打印一行文字”100 ticks”。
*********************************
*********************************


